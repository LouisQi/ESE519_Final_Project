
ESE519FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000978  00000a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  0080010c  0080010c  00000a18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cce  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fac  00000000  00000000  00003a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c66  00000000  00000000  000049e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000924  00000000  00000000  00006648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010f0  00000000  00000000  00006f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002660  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000a6bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 34 04 	call	0x868	; 0x868 <main>
  9e:	0c 94 ba 04 	jmp	0x974	; 0x974 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	9c 01       	movw	r18, r24
  ac:	fb 01       	movw	r30, r22
  ae:	dc 01       	movw	r26, r24
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	cd 91       	ld	r28, X+
  b4:	dc 91       	ld	r29, X
  b6:	12 97       	sbiw	r26, 0x02	; 2
  b8:	d3 83       	std	Z+3, r29	; 0x03
  ba:	c2 83       	std	Z+2, r28	; 0x02
  bc:	8c 81       	ldd	r24, Y+4	; 0x04
  be:	9d 81       	ldd	r25, Y+5	; 0x05
  c0:	95 83       	std	Z+5, r25	; 0x05
  c2:	84 83       	std	Z+4, r24	; 0x04
  c4:	8c 81       	ldd	r24, Y+4	; 0x04
  c6:	9d 81       	ldd	r25, Y+5	; 0x05
  c8:	dc 01       	movw	r26, r24
  ca:	13 96       	adiw	r26, 0x03	; 3
  cc:	7c 93       	st	X, r23
  ce:	6e 93       	st	-X, r22
  d0:	12 97       	sbiw	r26, 0x02	; 2
  d2:	7d 83       	std	Y+5, r23	; 0x05
  d4:	6c 83       	std	Y+4, r22	; 0x04
  d6:	31 87       	std	Z+9, r19	; 0x09
  d8:	20 87       	std	Z+8, r18	; 0x08
  da:	f9 01       	movw	r30, r18
  dc:	80 81       	ld	r24, Z
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 83       	st	Z, r24
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  ee:	a0 85       	ldd	r26, Z+8	; 0x08
  f0:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  f2:	c2 81       	ldd	r28, Z+2	; 0x02
  f4:	d3 81       	ldd	r29, Z+3	; 0x03
  f6:	84 81       	ldd	r24, Z+4	; 0x04
  f8:	95 81       	ldd	r25, Z+5	; 0x05
  fa:	9d 83       	std	Y+5, r25	; 0x05
  fc:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  fe:	c4 81       	ldd	r28, Z+4	; 0x04
 100:	d5 81       	ldd	r29, Z+5	; 0x05
 102:	82 81       	ldd	r24, Z+2	; 0x02
 104:	93 81       	ldd	r25, Z+3	; 0x03
 106:	9b 83       	std	Y+3, r25	; 0x03
 108:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	8d 91       	ld	r24, X+
 10e:	9c 91       	ld	r25, X
 110:	12 97       	sbiw	r26, 0x02	; 2
 112:	e8 17       	cp	r30, r24
 114:	f9 07       	cpc	r31, r25
 116:	31 f4       	brne	.+12     	; 0x124 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 118:	84 81       	ldd	r24, Z+4	; 0x04
 11a:	95 81       	ldd	r25, Z+5	; 0x05
 11c:	12 96       	adiw	r26, 0x02	; 2
 11e:	9c 93       	st	X, r25
 120:	8e 93       	st	-X, r24
 122:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 124:	11 86       	std	Z+9, r1	; 0x09
 126:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 128:	8c 91       	ld	r24, X
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	0f 92       	push	r0
 13c:	1f 92       	push	r1
 13e:	11 24       	eor	r1, r1
 140:	2f 92       	push	r2
 142:	3f 92       	push	r3
 144:	4f 92       	push	r4
 146:	5f 92       	push	r5
 148:	6f 92       	push	r6
 14a:	7f 92       	push	r7
 14c:	8f 92       	push	r8
 14e:	9f 92       	push	r9
 150:	af 92       	push	r10
 152:	bf 92       	push	r11
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
 17c:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <pxCurrentTCB>
 180:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <pxCurrentTCB+0x1>
 184:	0d b6       	in	r0, 0x3d	; 61
 186:	0d 92       	st	X+, r0
 188:	0e b6       	in	r0, 0x3e	; 62
 18a:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 18c:	0e 94 18 01 	call	0x230	; 0x230 <xTaskIncrementTick>
 190:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 192:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 196:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <pxCurrentTCB>
 19a:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <pxCurrentTCB+0x1>
 19e:	cd 91       	ld	r28, X+
 1a0:	cd bf       	out	0x3d, r28	; 61
 1a2:	dd 91       	ld	r29, X+
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	bf 90       	pop	r11
 1d0:	af 90       	pop	r10
 1d2:	9f 90       	pop	r9
 1d4:	8f 90       	pop	r8
 1d6:	7f 90       	pop	r7
 1d8:	6f 90       	pop	r6
 1da:	5f 90       	pop	r5
 1dc:	4f 90       	pop	r4
 1de:	3f 90       	pop	r3
 1e0:	2f 90       	pop	r2
 1e2:	1f 90       	pop	r1
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0

	asm volatile ( "ret" );
 1ea:	08 95       	ret

000001ec <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 1ec:	0e 94 9a 00 	call	0x134	; 0x134 <vPortYieldFromTick>
		asm volatile ( "reti" );
 1f0:	18 95       	reti

000001f2 <prvResetNextTaskUnblockTime>:
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 1f2:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <pxDelayedTaskList>
 1f6:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <pxDelayedTaskList+0x1>
 1fa:	80 81       	ld	r24, Z
 1fc:	81 11       	cpse	r24, r1
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <prvResetNextTaskUnblockTime+0x1c>
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	9f ef       	ldi	r25, 0xFF	; 255
 204:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	08 95       	ret
 20e:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <pxDelayedTaskList>
 212:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <pxDelayedTaskList+0x1>
 216:	05 80       	ldd	r0, Z+5	; 0x05
 218:	f6 81       	ldd	r31, Z+6	; 0x06
 21a:	e0 2d       	mov	r30, r0
 21c:	06 80       	ldd	r0, Z+6	; 0x06
 21e:	f7 81       	ldd	r31, Z+7	; 0x07
 220:	e0 2d       	mov	r30, r0
 222:	82 81       	ldd	r24, Z+2	; 0x02
 224:	93 81       	ldd	r25, Z+3	; 0x03
 226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 22e:	08 95       	ret

00000230 <xTaskIncrementTick>:
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 242:	81 11       	cpse	r24, r1
 244:	99 c0       	rjmp	.+306    	; 0x378 <xTaskIncrementTick+0x148>
 246:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <xTickCount>
 24a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <xTickCount+0x1>
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <xTickCount+0x1>
 254:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <xTickCount>
 258:	e0 90 11 01 	lds	r14, 0x0111	; 0x800111 <xTickCount>
 25c:	f0 90 12 01 	lds	r15, 0x0112	; 0x800112 <xTickCount+0x1>
 260:	e1 14       	cp	r14, r1
 262:	f1 04       	cpc	r15, r1
 264:	b9 f4       	brne	.+46     	; 0x294 <xTaskIncrementTick+0x64>
 266:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pxDelayedTaskList>
 26a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pxDelayedTaskList+0x1>
 26e:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <pxOverflowDelayedTaskList>
 272:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <pxOverflowDelayedTaskList+0x1>
 276:	30 93 16 01 	sts	0x0116, r19	; 0x800116 <pxDelayedTaskList+0x1>
 27a:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <pxDelayedTaskList>
 27e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <pxOverflowDelayedTaskList+0x1>
 282:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pxOverflowDelayedTaskList>
 286:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <xNumOfOverflows>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <xNumOfOverflows>
 290:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <prvResetNextTaskUnblockTime>
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29c:	e8 16       	cp	r14, r24
 29e:	f9 06       	cpc	r15, r25
 2a0:	28 f4       	brcc	.+10     	; 0x2ac <xTaskIncrementTick+0x7c>
 2a2:	d1 2c       	mov	r13, r1
 2a4:	53 c0       	rjmp	.+166    	; 0x34c <xTaskIncrementTick+0x11c>
 2a6:	dd 24       	eor	r13, r13
 2a8:	d3 94       	inc	r13
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <xTaskIncrementTick+0x7e>
 2ac:	d1 2c       	mov	r13, r1
 2ae:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <pxDelayedTaskList>
 2b2:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <pxDelayedTaskList+0x1>
 2b6:	80 81       	ld	r24, Z
 2b8:	81 11       	cpse	r24, r1
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <xTaskIncrementTick+0x9a>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c8:	41 c0       	rjmp	.+130    	; 0x34c <xTaskIncrementTick+0x11c>
 2ca:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <pxDelayedTaskList>
 2ce:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <pxDelayedTaskList+0x1>
 2d2:	05 80       	ldd	r0, Z+5	; 0x05
 2d4:	f6 81       	ldd	r31, Z+6	; 0x06
 2d6:	e0 2d       	mov	r30, r0
 2d8:	c6 81       	ldd	r28, Z+6	; 0x06
 2da:	d7 81       	ldd	r29, Z+7	; 0x07
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	9b 81       	ldd	r25, Y+3	; 0x03
 2e0:	e8 16       	cp	r14, r24
 2e2:	f9 06       	cpc	r15, r25
 2e4:	28 f4       	brcc	.+10     	; 0x2f0 <xTaskIncrementTick+0xc0>
 2e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ee:	2e c0       	rjmp	.+92     	; 0x34c <xTaskIncrementTick+0x11c>
 2f0:	8e 01       	movw	r16, r28
 2f2:	0e 5f       	subi	r16, 0xFE	; 254
 2f4:	1f 4f       	sbci	r17, 0xFF	; 255
 2f6:	c8 01       	movw	r24, r16
 2f8:	0e 94 74 00 	call	0xe8	; 0xe8 <uxListRemove>
 2fc:	8c 89       	ldd	r24, Y+20	; 0x14
 2fe:	9d 89       	ldd	r25, Y+21	; 0x15
 300:	89 2b       	or	r24, r25
 302:	21 f0       	breq	.+8      	; 0x30c <xTaskIncrementTick+0xdc>
 304:	ce 01       	movw	r24, r28
 306:	0c 96       	adiw	r24, 0x0c	; 12
 308:	0e 94 74 00 	call	0xe8	; 0xe8 <uxListRemove>
 30c:	8e 89       	ldd	r24, Y+22	; 0x16
 30e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <uxTopReadyPriority>
 312:	98 17       	cp	r25, r24
 314:	10 f4       	brcc	.+4      	; 0x31a <xTaskIncrementTick+0xea>
 316:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <uxTopReadyPriority>
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	9c 01       	movw	r18, r24
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	82 0f       	add	r24, r18
 32c:	93 1f       	adc	r25, r19
 32e:	b8 01       	movw	r22, r16
 330:	89 5e       	subi	r24, 0xE9	; 233
 332:	9e 4f       	sbci	r25, 0xFE	; 254
 334:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInsertEnd>
 338:	9e 89       	ldd	r25, Y+22	; 0x16
 33a:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <pxCurrentTCB>
 33e:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <pxCurrentTCB+0x1>
 342:	86 89       	ldd	r24, Z+22	; 0x16
 344:	98 17       	cp	r25, r24
 346:	08 f0       	brcs	.+2      	; 0x34a <xTaskIncrementTick+0x11a>
 348:	ae cf       	rjmp	.-164    	; 0x2a6 <xTaskIncrementTick+0x76>
 34a:	b1 cf       	rjmp	.-158    	; 0x2ae <xTaskIncrementTick+0x7e>
 34c:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <pxCurrentTCB>
 350:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <pxCurrentTCB+0x1>
 354:	86 89       	ldd	r24, Z+22	; 0x16
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	ee 0f       	add	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	8e 0f       	add	r24, r30
 368:	9f 1f       	adc	r25, r31
 36a:	fc 01       	movw	r30, r24
 36c:	e9 5e       	subi	r30, 0xE9	; 233
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	80 81       	ld	r24, Z
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	40 f4       	brcc	.+16     	; 0x386 <xTaskIncrementTick+0x156>
 376:	09 c0       	rjmp	.+18     	; 0x38a <xTaskIncrementTick+0x15a>
 378:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <uxPendedTicks>
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <uxPendedTicks>
 382:	d1 2c       	mov	r13, r1
 384:	02 c0       	rjmp	.+4      	; 0x38a <xTaskIncrementTick+0x15a>
 386:	dd 24       	eor	r13, r13
 388:	d3 94       	inc	r13
 38a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <xYieldPending>
 38e:	88 23       	and	r24, r24
 390:	11 f0       	breq	.+4      	; 0x396 <xTaskIncrementTick+0x166>
 392:	dd 24       	eor	r13, r13
 394:	d3 94       	inc	r13
 396:	8d 2d       	mov	r24, r13
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	08 95       	ret

000003a8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 3ac:	88 23       	and	r24, r24
 3ae:	21 f0       	breq	.+8      	; 0x3b8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xYieldPending>
 3b6:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 3b8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <xYieldPending>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <vTaskSwitchContext+0x20>
 3be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <uxTopReadyPriority>
 3c2:	81 50       	subi	r24, 0x01	; 1
 3c4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <uxTopReadyPriority>
 3c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <uxTopReadyPriority>
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	fc 01       	movw	r30, r24
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	8e 0f       	add	r24, r30
 3de:	9f 1f       	adc	r25, r31
 3e0:	fc 01       	movw	r30, r24
 3e2:	e9 5e       	subi	r30, 0xE9	; 233
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
 3e6:	80 81       	ld	r24, Z
 3e8:	88 23       	and	r24, r24
 3ea:	49 f3       	breq	.-46     	; 0x3be <vTaskSwitchContext+0x16>
 3ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <uxTopReadyPriority>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	9c 01       	movw	r18, r24
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	22 0f       	add	r18, r18
 3fa:	33 1f       	adc	r19, r19
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	28 0f       	add	r18, r24
 402:	39 1f       	adc	r19, r25
 404:	d9 01       	movw	r26, r18
 406:	a9 5e       	subi	r26, 0xE9	; 233
 408:	be 4f       	sbci	r27, 0xFE	; 254
 40a:	11 96       	adiw	r26, 0x01	; 1
 40c:	ed 91       	ld	r30, X+
 40e:	fc 91       	ld	r31, X
 410:	12 97       	sbiw	r26, 0x02	; 2
 412:	02 80       	ldd	r0, Z+2	; 0x02
 414:	f3 81       	ldd	r31, Z+3	; 0x03
 416:	e0 2d       	mov	r30, r0
 418:	12 96       	adiw	r26, 0x02	; 2
 41a:	fc 93       	st	X, r31
 41c:	ee 93       	st	-X, r30
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	26 5e       	subi	r18, 0xE6	; 230
 422:	3e 4f       	sbci	r19, 0xFE	; 254
 424:	e2 17       	cp	r30, r18
 426:	f3 07       	cpc	r31, r19
 428:	29 f4       	brne	.+10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42a:	22 81       	ldd	r18, Z+2	; 0x02
 42c:	33 81       	ldd	r19, Z+3	; 0x03
 42e:	fd 01       	movw	r30, r26
 430:	32 83       	std	Z+2, r19	; 0x02
 432:	21 83       	std	Z+1, r18	; 0x01
 434:	fc 01       	movw	r30, r24
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	8e 0f       	add	r24, r30
 444:	9f 1f       	adc	r25, r31
 446:	fc 01       	movw	r30, r24
 448:	e9 5e       	subi	r30, 0xE9	; 233
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	01 80       	ldd	r0, Z+1	; 0x01
 44e:	f2 81       	ldd	r31, Z+2	; 0x02
 450:	e0 2d       	mov	r30, r0
 452:	86 81       	ldd	r24, Z+6	; 0x06
 454:	97 81       	ldd	r25, Z+7	; 0x07
 456:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <pxCurrentTCB+0x1>
 45a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <pxCurrentTCB>
 45e:	08 95       	ret

00000460 <hx711_read>:
/**
 * calibration step 2 of 2, set the scale
 */
void hx711_calibrate2setscale(double weight) {
	hx711_setscale((hx711_readaverage(HX711_CALIBRATIONREADTIMES)-hx711_offset)/weight);
}
 460:	4e 99       	sbic	0x09, 6	; 9
 462:	fe cf       	rjmp	.-4      	; 0x460 <hx711_read>
 464:	f8 94       	cli
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	ba 01       	movw	r22, r20
 46e:	27 c0       	rjmp	.+78     	; 0x4be <hx711_read+0x5e>
 470:	8b b1       	in	r24, 0x0b	; 11
 472:	80 62       	ori	r24, 0x20	; 32
 474:	8b b9       	out	0x0b, r24	; 11
 476:	00 00       	nop
 478:	44 0f       	add	r20, r20
 47a:	55 1f       	adc	r21, r21
 47c:	66 1f       	adc	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	8b b1       	in	r24, 0x0b	; 11
 482:	8f 7d       	andi	r24, 0xDF	; 223
 484:	8b b9       	out	0x0b, r24	; 11
 486:	00 00       	nop
 488:	4e 9b       	sbis	0x09, 6	; 9
 48a:	04 c0       	rjmp	.+8      	; 0x494 <hx711_read+0x34>
 48c:	4f 5f       	subi	r20, 0xFF	; 255
 48e:	5f 4f       	sbci	r21, 0xFF	; 255
 490:	6f 4f       	sbci	r22, 0xFF	; 255
 492:	7f 4f       	sbci	r23, 0xFF	; 255
 494:	9f 5f       	subi	r25, 0xFF	; 255
 496:	01 c0       	rjmp	.+2      	; 0x49a <hx711_read+0x3a>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	98 31       	cpi	r25, 0x18	; 24
 49c:	48 f3       	brcs	.-46     	; 0x470 <hx711_read+0x10>
 49e:	60 58       	subi	r22, 0x80	; 128
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <hx711_read+0x54>
 4a4:	8b b1       	in	r24, 0x0b	; 11
 4a6:	80 62       	ori	r24, 0x20	; 32
 4a8:	8b b9       	out	0x0b, r24	; 11
 4aa:	00 00       	nop
 4ac:	8b b1       	in	r24, 0x0b	; 11
 4ae:	8f 7d       	andi	r24, 0xDF	; 223
 4b0:	8b b9       	out	0x0b, r24	; 11
 4b2:	9f 5f       	subi	r25, 0xFF	; 255
 4b4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <hx711_gain>
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	98 17       	cp	r25, r24
 4bc:	98 f3       	brcs	.-26     	; 0x4a4 <hx711_read+0x44>
 4be:	21 11       	cpse	r18, r1
 4c0:	eb cf       	rjmp	.-42     	; 0x498 <hx711_read+0x38>
 4c2:	78 94       	sei
 4c4:	cb 01       	movw	r24, r22
 4c6:	ba 01       	movw	r22, r20
 4c8:	08 95       	ret

000004ca <hx711_setgain>:
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	91 05       	cpc	r25, r1
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <hx711_setgain+0xe>
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <hx711_gain>
 4d6:	10 c0       	rjmp	.+32     	; 0x4f8 <hx711_setgain+0x2e>
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	91 05       	cpc	r25, r1
 4dc:	21 f4       	brne	.+8      	; 0x4e6 <hx711_setgain+0x1c>
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <hx711_gain>
 4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <hx711_setgain+0x2e>
 4e6:	02 97       	sbiw	r24, 0x02	; 2
 4e8:	21 f4       	brne	.+8      	; 0x4f2 <hx711_setgain+0x28>
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <hx711_gain>
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <hx711_setgain+0x2e>
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <hx711_gain>
 4f8:	8b b1       	in	r24, 0x0b	; 11
 4fa:	8f 7d       	andi	r24, 0xDF	; 223
 4fc:	8b b9       	out	0x0b, r24	; 11
 4fe:	0e 94 30 02 	call	0x460	; 0x460 <hx711_read>
 502:	08 95       	ret

00000504 <hx711_setscale>:
 504:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <hx711_scale>
 508:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <hx711_scale+0x1>
 50c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <hx711_scale+0x2>
 510:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <hx711_scale+0x3>
 514:	08 95       	ret

00000516 <hx711_setoffset>:
 516:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <hx711_offset>
 51a:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <hx711_offset+0x1>
 51e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <hx711_offset+0x2>
 522:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <hx711_offset+0x3>
 526:	08 95       	ret

00000528 <hx711_init>:

/**
 * initialize chip
 */
void hx711_init(uint8_t gain, double scale, int32_t offset) {
 528:	8f 92       	push	r8
 52a:	9f 92       	push	r9
 52c:	af 92       	push	r10
 52e:	bf 92       	push	r11
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	4a 01       	movw	r8, r20
 53e:	5b 01       	movw	r10, r22
 540:	68 01       	movw	r12, r16
 542:	79 01       	movw	r14, r18
	//set sck as output
	HX711_SCKDDR |= (1<<HX711_SCKPINNUM);
 544:	9a b1       	in	r25, 0x0a	; 10
 546:	90 62       	ori	r25, 0x20	; 32
 548:	9a b9       	out	0x0a, r25	; 10
	HX711_SCKPORT &= ~(1<<HX711_SCKPINNUM);
 54a:	9b b1       	in	r25, 0x0b	; 11
 54c:	9f 7d       	andi	r25, 0xDF	; 223
 54e:	9b b9       	out	0x0b, r25	; 11
	//set dt as input
	HX711_DTDDR &= ~(1<<HX711_DTPINNUM);
 550:	9a b1       	in	r25, 0x0a	; 10
 552:	9f 7b       	andi	r25, 0xBF	; 191
 554:	9a b9       	out	0x0a, r25	; 10

	//set gain
	hx711_setgain(gain);
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 65 02 	call	0x4ca	; 0x4ca <hx711_setgain>
	//set scale
	hx711_setscale(scale);
 55c:	c5 01       	movw	r24, r10
 55e:	b4 01       	movw	r22, r8
 560:	0e 94 82 02 	call	0x504	; 0x504 <hx711_setscale>
	//set offset
	hx711_setoffset(offset);
 564:	c7 01       	movw	r24, r14
 566:	b6 01       	movw	r22, r12
 568:	0e 94 8b 02 	call	0x516	; 0x516 <hx711_setoffset>
}
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	ef 90       	pop	r14
 574:	df 90       	pop	r13
 576:	cf 90       	pop	r12
 578:	bf 90       	pop	r11
 57a:	af 90       	pop	r10
 57c:	9f 90       	pop	r9
 57e:	8f 90       	pop	r8
 580:	08 95       	ret

00000582 <UART_initilization>:

void UART_initilization()
{
	/*Set BAUD rate*/
	// High 8 bits
	UBRR0H = UBRR_VALUE >> 8;
 582:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	// Low 8 bits
	UBRR0L = UBRR_VALUE;
 586:	87 e6       	ldi	r24, 0x67	; 103
 588:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 58c:	88 e1       	ldi	r24, 0x18	; 24
 58e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// 8-bit data
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	
 592:	e2 ec       	ldi	r30, 0xC2	; 194
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	86 e0       	ldi	r24, 0x06	; 6
 598:	80 83       	st	Z, r24
	// Set 2 stop bit
	UCSR0C |= 1<<USBS0;
 59a:	80 81       	ld	r24, Z
 59c:	88 60       	ori	r24, 0x08	; 8
 59e:	80 83       	st	Z, r24
 5a0:	08 95       	ret

000005a2 <Initialization>:
		
	dtostrf(weight, 3, 2, printbuff);
	sprintf(String,"Weight: %s kg\n\r",printbuff);
	UART_print(String);
	_delay_ms(500);	
}
 5a2:	8a b1       	in	r24, 0x0a	; 10
 5a4:	80 61       	ori	r24, 0x10	; 16
 5a6:	8a b9       	out	0x0a, r24	; 10
 5a8:	84 b1       	in	r24, 0x04	; 4
 5aa:	82 60       	ori	r24, 0x02	; 2
 5ac:	84 b9       	out	0x04, r24	; 4
 5ae:	a0 e8       	ldi	r26, 0x80	; 128
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	8c 91       	ld	r24, X
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	8c 93       	st	X, r24
 5b8:	e1 e8       	ldi	r30, 0x81	; 129
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	88 60       	ori	r24, 0x08	; 8
 5c0:	80 83       	st	Z, r24
 5c2:	80 81       	ld	r24, Z
 5c4:	80 61       	ori	r24, 0x10	; 16
 5c6:	80 83       	st	Z, r24
 5c8:	8c 91       	ld	r24, X
 5ca:	80 68       	ori	r24, 0x80	; 128
 5cc:	8c 93       	st	X, r24
 5ce:	80 81       	ld	r24, Z
 5d0:	82 60       	ori	r24, 0x02	; 2
 5d2:	80 83       	st	Z, r24
 5d4:	8f e3       	ldi	r24, 0x3F	; 63
 5d6:	9c e9       	ldi	r25, 0x9C	; 156
 5d8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 5dc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 5e0:	8f eb       	ldi	r24, 0xBF	; 191
 5e2:	92 e1       	ldi	r25, 0x12	; 18
 5e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 5e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 5ec:	08 95       	ret

000005ee <map>:
 5ee:	4f 92       	push	r4
 5f0:	5f 92       	push	r5
 5f2:	6f 92       	push	r6
 5f4:	7f 92       	push	r7
 5f6:	af 92       	push	r10
 5f8:	bf 92       	push	r11
 5fa:	cf 92       	push	r12
 5fc:	df 92       	push	r13
 5fe:	ef 92       	push	r14
 600:	ff 92       	push	r15
 602:	0f 93       	push	r16
 604:	1f 93       	push	r17
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	29 01       	movw	r4, r18
 610:	3a 01       	movw	r6, r20
 612:	9b 01       	movw	r18, r22
 614:	ac 01       	movw	r20, r24
 616:	24 19       	sub	r18, r4
 618:	35 09       	sbc	r19, r5
 61a:	46 09       	sbc	r20, r6
 61c:	57 09       	sbc	r21, r7
 61e:	89 89       	ldd	r24, Y+17	; 0x11
 620:	9a 89       	ldd	r25, Y+18	; 0x12
 622:	ab 89       	ldd	r26, Y+19	; 0x13
 624:	bc 89       	ldd	r27, Y+20	; 0x14
 626:	bc 01       	movw	r22, r24
 628:	cd 01       	movw	r24, r26
 62a:	6a 19       	sub	r22, r10
 62c:	7b 09       	sbc	r23, r11
 62e:	8c 09       	sbc	r24, r12
 630:	9d 09       	sbc	r25, r13
 632:	0e 94 4f 04 	call	0x89e	; 0x89e <__mulsi3>
 636:	a8 01       	movw	r20, r16
 638:	97 01       	movw	r18, r14
 63a:	24 19       	sub	r18, r4
 63c:	35 09       	sbc	r19, r5
 63e:	46 09       	sbc	r20, r6
 640:	57 09       	sbc	r21, r7
 642:	0e 94 5f 04 	call	0x8be	; 0x8be <__divmodsi4>
 646:	a2 0e       	add	r10, r18
 648:	b3 1e       	adc	r11, r19
 64a:	bb 20       	and	r11, r11
 64c:	1c f4       	brge	.+6      	; 0x654 <map+0x66>
 64e:	b1 94       	neg	r11
 650:	a1 94       	neg	r10
 652:	b1 08       	sbc	r11, r1
 654:	b5 01       	movw	r22, r10
 656:	bb 0c       	add	r11, r11
 658:	88 0b       	sbc	r24, r24
 65a:	99 0b       	sbc	r25, r25
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	df 90       	pop	r13
 66a:	cf 90       	pop	r12
 66c:	bf 90       	pop	r11
 66e:	af 90       	pop	r10
 670:	7f 90       	pop	r7
 672:	6f 90       	pop	r6
 674:	5f 90       	pop	r5
 676:	4f 90       	pop	r4
 678:	08 95       	ret

0000067a <ADC_Initialization>:
 67a:	e4 e6       	ldi	r30, 0x64	; 100
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	8e 7f       	andi	r24, 0xFE	; 254
 682:	80 83       	st	Z, r24
 684:	ac e7       	ldi	r26, 0x7C	; 124
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	8c 91       	ld	r24, X
 68a:	80 64       	ori	r24, 0x40	; 64
 68c:	8c 93       	st	X, r24
 68e:	8c 91       	ld	r24, X
 690:	8f 77       	andi	r24, 0x7F	; 127
 692:	8c 93       	st	X, r24
 694:	ea e7       	ldi	r30, 0x7A	; 122
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	80 83       	st	Z, r24
 69e:	80 81       	ld	r24, Z
 6a0:	82 60       	ori	r24, 0x02	; 2
 6a2:	80 83       	st	Z, r24
 6a4:	80 81       	ld	r24, Z
 6a6:	84 60       	ori	r24, 0x04	; 4
 6a8:	80 83       	st	Z, r24
 6aa:	8c 91       	ld	r24, X
 6ac:	88 7f       	andi	r24, 0xF8	; 248
 6ae:	8c 93       	st	X, r24
 6b0:	80 81       	ld	r24, Z
 6b2:	80 62       	ori	r24, 0x20	; 32
 6b4:	80 83       	st	Z, r24
 6b6:	ab e7       	ldi	r26, 0x7B	; 123
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	8c 91       	ld	r24, X
 6bc:	8e 7f       	andi	r24, 0xFE	; 254
 6be:	8c 93       	st	X, r24
 6c0:	8c 91       	ld	r24, X
 6c2:	8d 7f       	andi	r24, 0xFD	; 253
 6c4:	8c 93       	st	X, r24
 6c6:	8c 91       	ld	r24, X
 6c8:	8b 7f       	andi	r24, 0xFB	; 251
 6ca:	8c 93       	st	X, r24
 6cc:	ae e7       	ldi	r26, 0x7E	; 126
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	8c 91       	ld	r24, X
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	8c 93       	st	X, r24
 6d6:	80 81       	ld	r24, Z
 6d8:	80 68       	ori	r24, 0x80	; 128
 6da:	80 83       	st	Z, r24
 6dc:	80 81       	ld	r24, Z
 6de:	88 60       	ori	r24, 0x08	; 8
 6e0:	80 83       	st	Z, r24
 6e2:	80 81       	ld	r24, Z
 6e4:	80 64       	ori	r24, 0x40	; 64
 6e6:	80 83       	st	Z, r24
 6e8:	08 95       	ret

000006ea <__vector_21>:
 6ea:	1f 92       	push	r1
 6ec:	0f 92       	push	r0
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	0f 92       	push	r0
 6f2:	11 24       	eor	r1, r1
 6f4:	af 92       	push	r10
 6f6:	bf 92       	push	r11
 6f8:	cf 92       	push	r12
 6fa:	df 92       	push	r13
 6fc:	ef 92       	push	r14
 6fe:	ff 92       	push	r15
 700:	0f 93       	push	r16
 702:	1f 93       	push	r17
 704:	2f 93       	push	r18
 706:	3f 93       	push	r19
 708:	4f 93       	push	r20
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	ef 93       	push	r30
 71e:	ff 93       	push	r31
 720:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <ADC_channel.2181>
 724:	d0 91 47 01 	lds	r29, 0x0147	; 0x800147 <ADC_channel.2181+0x1>
 728:	20 97       	sbiw	r28, 0x00	; 0
 72a:	49 f4       	brne	.+18     	; 0x73e <__vector_21+0x54>
 72c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 730:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 734:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <photoresistor1_reading+0x1>
 738:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <photoresistor1_reading>
 73c:	3d c0       	rjmp	.+122    	; 0x7b8 <__vector_21+0xce>
 73e:	c1 30       	cpi	r28, 0x01	; 1
 740:	d1 05       	cpc	r29, r1
 742:	49 f4       	brne	.+18     	; 0x756 <__vector_21+0x6c>
 744:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 748:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 74c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <photoresistor2_reading+0x1>
 750:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <photoresistor2_reading>
 754:	31 c0       	rjmp	.+98     	; 0x7b8 <__vector_21+0xce>
 756:	c2 30       	cpi	r28, 0x02	; 2
 758:	d1 05       	cpc	r29, r1
 75a:	71 f5       	brne	.+92     	; 0x7b8 <__vector_21+0xce>
 75c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 760:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 764:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <soil_mositure_reading+0x1>
 768:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <soil_mositure_reading>
 76c:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <soil_mositure_reading>
 770:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <soil_mositure_reading+0x1>
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	1f 92       	push	r1
 77a:	1f 92       	push	r1
 77c:	1f 92       	push	r1
 77e:	24 e6       	ldi	r18, 0x64	; 100
 780:	2f 93       	push	r18
 782:	a1 2c       	mov	r10, r1
 784:	b1 2c       	mov	r11, r1
 786:	65 01       	movw	r12, r10
 788:	1c e2       	ldi	r17, 0x2C	; 44
 78a:	e1 2e       	mov	r14, r17
 78c:	ff 24       	eor	r15, r15
 78e:	f3 94       	inc	r15
 790:	00 e0       	ldi	r16, 0x00	; 0
 792:	10 e0       	ldi	r17, 0x00	; 0
 794:	20 e7       	ldi	r18, 0x70	; 112
 796:	32 e0       	ldi	r19, 0x02	; 2
 798:	40 e0       	ldi	r20, 0x00	; 0
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <map>
 7a0:	0f 90       	pop	r0
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <soil_mositure>
 7ac:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <soil_mositure+0x1>
 7b0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <soil_mositure+0x2>
 7b4:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <soil_mositure+0x3>
 7b8:	21 96       	adiw	r28, 0x01	; 1
 7ba:	d0 93 47 01 	sts	0x0147, r29	; 0x800147 <ADC_channel.2181+0x1>
 7be:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <ADC_channel.2181>
 7c2:	23 97       	sbiw	r28, 0x03	; 3
 7c4:	24 f0       	brlt	.+8      	; 0x7ce <__vector_21+0xe4>
 7c6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <ADC_channel.2181+0x1>
 7ca:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <ADC_channel.2181>
 7ce:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ADC_channel.2181>
 7d2:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ADC_channel.2181+0x1>
 7d6:	00 97       	sbiw	r24, 0x00	; 0
 7d8:	31 f4       	brne	.+12     	; 0x7e6 <__vector_21+0xfc>
 7da:	ec e7       	ldi	r30, 0x7C	; 124
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	88 7f       	andi	r24, 0xF8	; 248
 7e2:	80 83       	st	Z, r24
 7e4:	12 c0       	rjmp	.+36     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	91 05       	cpc	r25, r1
 7ea:	39 f4       	brne	.+14     	; 0x7fa <__vector_21+0x110>
 7ec:	ec e7       	ldi	r30, 0x7C	; 124
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	88 7f       	andi	r24, 0xF8	; 248
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	80 83       	st	Z, r24
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fa:	02 97       	sbiw	r24, 0x02	; 2
 7fc:	31 f4       	brne	.+12     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fe:	ec e7       	ldi	r30, 0x7C	; 124
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	88 7f       	andi	r24, 0xF8	; 248
 806:	82 60       	ori	r24, 0x02	; 2
 808:	80 83       	st	Z, r24
 80a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <photoresistor1_reading>
 80e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <photoresistor1_reading+0x1>
 812:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <photoresistor2_reading>
 816:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <photoresistor2_reading+0x1>
 81a:	82 1b       	sub	r24, r18
 81c:	93 0b       	sbc	r25, r19
 81e:	9c 01       	movw	r18, r24
 820:	22 f4       	brpl	.+8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 822:	22 27       	eor	r18, r18
 824:	33 27       	eor	r19, r19
 826:	28 1b       	sub	r18, r24
 828:	39 0b       	sbc	r19, r25
 82a:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <photoresistor_difference+0x1>
 82e:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <photoresistor_difference>
 832:	ff 91       	pop	r31
 834:	ef 91       	pop	r30
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	bf 91       	pop	r27
 83c:	af 91       	pop	r26
 83e:	9f 91       	pop	r25
 840:	8f 91       	pop	r24
 842:	7f 91       	pop	r23
 844:	6f 91       	pop	r22
 846:	5f 91       	pop	r21
 848:	4f 91       	pop	r20
 84a:	3f 91       	pop	r19
 84c:	2f 91       	pop	r18
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	ff 90       	pop	r15
 854:	ef 90       	pop	r14
 856:	df 90       	pop	r13
 858:	cf 90       	pop	r12
 85a:	bf 90       	pop	r11
 85c:	af 90       	pop	r10
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <main>:


int main(void)
{

	Initialization ();
 868:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Initialization>
	
	// Initialize UART 
	UART_initilization();
 86c:	0e 94 c1 02 	call	0x582	; 0x582 <UART_initilization>
	
	// Initialize ADC
	ADC_Initialization ();
 870:	0e 94 3d 03 	call	0x67a	; 0x67a <ADC_Initialization>
	
	//Initialize HX711
	hx711_init(gain, scale, offset);
 874:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <offset>
 878:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <offset+0x1>
 87c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <offset+0x2>
 880:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <offset+0x3>
 884:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <scale>
 888:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <scale+0x1>
 88c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <scale+0x2>
 890:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <scale+0x3>
 894:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <gain>
 898:	0e 94 94 02 	call	0x528	; 0x528 <hx711_init>
 89c:	ff cf       	rjmp	.-2      	; 0x89c <main+0x34>

0000089e <__mulsi3>:
 89e:	db 01       	movw	r26, r22
 8a0:	8f 93       	push	r24
 8a2:	9f 93       	push	r25
 8a4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__muluhisi3>
 8a8:	bf 91       	pop	r27
 8aa:	af 91       	pop	r26
 8ac:	a2 9f       	mul	r26, r18
 8ae:	80 0d       	add	r24, r0
 8b0:	91 1d       	adc	r25, r1
 8b2:	a3 9f       	mul	r26, r19
 8b4:	90 0d       	add	r25, r0
 8b6:	b2 9f       	mul	r27, r18
 8b8:	90 0d       	add	r25, r0
 8ba:	11 24       	eor	r1, r1
 8bc:	08 95       	ret

000008be <__divmodsi4>:
 8be:	05 2e       	mov	r0, r21
 8c0:	97 fb       	bst	r25, 7
 8c2:	1e f4       	brtc	.+6      	; 0x8ca <__divmodsi4+0xc>
 8c4:	00 94       	com	r0
 8c6:	0e 94 76 04 	call	0x8ec	; 0x8ec <__negsi2>
 8ca:	57 fd       	sbrc	r21, 7
 8cc:	07 d0       	rcall	.+14     	; 0x8dc <__divmodsi4_neg2>
 8ce:	0e 94 89 04 	call	0x912	; 0x912 <__udivmodsi4>
 8d2:	07 fc       	sbrc	r0, 7
 8d4:	03 d0       	rcall	.+6      	; 0x8dc <__divmodsi4_neg2>
 8d6:	4e f4       	brtc	.+18     	; 0x8ea <__divmodsi4_exit>
 8d8:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__negsi2>

000008dc <__divmodsi4_neg2>:
 8dc:	50 95       	com	r21
 8de:	40 95       	com	r20
 8e0:	30 95       	com	r19
 8e2:	21 95       	neg	r18
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	4f 4f       	sbci	r20, 0xFF	; 255
 8e8:	5f 4f       	sbci	r21, 0xFF	; 255

000008ea <__divmodsi4_exit>:
 8ea:	08 95       	ret

000008ec <__negsi2>:
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	08 95       	ret

000008fc <__muluhisi3>:
 8fc:	0e 94 ab 04 	call	0x956	; 0x956 <__umulhisi3>
 900:	a5 9f       	mul	r26, r21
 902:	90 0d       	add	r25, r0
 904:	b4 9f       	mul	r27, r20
 906:	90 0d       	add	r25, r0
 908:	a4 9f       	mul	r26, r20
 90a:	80 0d       	add	r24, r0
 90c:	91 1d       	adc	r25, r1
 90e:	11 24       	eor	r1, r1
 910:	08 95       	ret

00000912 <__udivmodsi4>:
 912:	a1 e2       	ldi	r26, 0x21	; 33
 914:	1a 2e       	mov	r1, r26
 916:	aa 1b       	sub	r26, r26
 918:	bb 1b       	sub	r27, r27
 91a:	fd 01       	movw	r30, r26
 91c:	0d c0       	rjmp	.+26     	; 0x938 <__udivmodsi4_ep>

0000091e <__udivmodsi4_loop>:
 91e:	aa 1f       	adc	r26, r26
 920:	bb 1f       	adc	r27, r27
 922:	ee 1f       	adc	r30, r30
 924:	ff 1f       	adc	r31, r31
 926:	a2 17       	cp	r26, r18
 928:	b3 07       	cpc	r27, r19
 92a:	e4 07       	cpc	r30, r20
 92c:	f5 07       	cpc	r31, r21
 92e:	20 f0       	brcs	.+8      	; 0x938 <__udivmodsi4_ep>
 930:	a2 1b       	sub	r26, r18
 932:	b3 0b       	sbc	r27, r19
 934:	e4 0b       	sbc	r30, r20
 936:	f5 0b       	sbc	r31, r21

00000938 <__udivmodsi4_ep>:
 938:	66 1f       	adc	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	1a 94       	dec	r1
 942:	69 f7       	brne	.-38     	; 0x91e <__udivmodsi4_loop>
 944:	60 95       	com	r22
 946:	70 95       	com	r23
 948:	80 95       	com	r24
 94a:	90 95       	com	r25
 94c:	9b 01       	movw	r18, r22
 94e:	ac 01       	movw	r20, r24
 950:	bd 01       	movw	r22, r26
 952:	cf 01       	movw	r24, r30
 954:	08 95       	ret

00000956 <__umulhisi3>:
 956:	a2 9f       	mul	r26, r18
 958:	b0 01       	movw	r22, r0
 95a:	b3 9f       	mul	r27, r19
 95c:	c0 01       	movw	r24, r0
 95e:	a3 9f       	mul	r26, r19
 960:	70 0d       	add	r23, r0
 962:	81 1d       	adc	r24, r1
 964:	11 24       	eor	r1, r1
 966:	91 1d       	adc	r25, r1
 968:	b2 9f       	mul	r27, r18
 96a:	70 0d       	add	r23, r0
 96c:	81 1d       	adc	r24, r1
 96e:	11 24       	eor	r1, r1
 970:	91 1d       	adc	r25, r1
 972:	08 95       	ret

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
